1: 项目简介
    本项目是一个基于 Qt 5 和 Linux V4L2 (Video4Linux2) API 开发的摄像头应用程序
    程序采用多线程架构，将耗时的V4L2硬件操作与主GUI线程分离，确保了界面的流畅响应，避免因摄像头数据采集而导致的界面卡死问题。
2: 主要功能
    实时视频显示: 从指定的V4L2设备（如 /dev/video0）捕获视频流并实时显示在界面上.
    多线程架构: 核心的摄像头数据读取和格式转换在一个独立的工作线程中完成，通过信号槽机制将图像安全地传递给主线程进行显示。
    亮度控制:(由于底层是yuyv（未压缩）格式的数据后面使用QT进行的格式转换成mjpg（压缩格式）亮度值可能没yuyv那么明显)
         提供“亮度+”和“亮度-”按钮，用于实时调节摄像头的亮度。
         在界面上实时显示当前的亮度数值，提供直观反馈。
    拍照功能: 可以随时点击“拍照”按钮，将当前视频帧保存为一张 .jpg 图片。图片会自动以时间戳命名并保存在程序运行的当前目录下。
    高兼容性: 直接使用Linux内核标准的V4L2接口，不依赖高级的Qt Multimedia模块，适用于各种经过裁剪的嵌入式Qt环境。
3. 技术架构
    项目主要由以下几个C++类构成：
    Widget (widget.h / .cpp):
        主窗口类，负责创建和管理所有UI控件。
        处理用户的点击事件（拍照、调节亮度）。
        通过信号槽机制，启动工作线程并接收线程发来的图像数据进行显示。
    CameraThread (camerathread.h / .cpp):
        核心工作线程类，继承自 QThread。
        所有耗时的V4L2操作都在这个线程的 run() 函数中执行。
        负责循环地从摄像头获取数据，并通过 newFrame(QImage) 信号将处理好的图像发送出去。
        接收主线程的指令来调整亮度或执行拍照。
    V4L2Camera (v4l2camera.h / .cpp):
        底层的V4L2硬件封装类。
        这个类不涉及任何Qt线程或UI逻辑，它只专注于通过 ioctl 系统调用来完成打开设备、设置格式、请求/映射缓冲区、出队/入队、设置硬件参数等所有底层操作。
4:环境依赖
    操作系统: 嵌入式Linux (本项目已在基于IMX6ULL和LubanCat4(RK3588s)的系统上进行过测试)。
    交叉编译工具链: 适用于目标板的 aarch64 或 arm 交叉编译器。
    Qt版本: 交叉编译好的 Qt 5.x 版本 (无需 Qt Multimedia 模块)。
    硬件: 驱动是一个虚拟摄像头驱动可以直接加载驱动然后打开那个接口。
5: 编译过程
    确保环境已经被加载成功。
    在untitled下使用qmake untitled.pro 文件就会生成makefile然后make就行了。
